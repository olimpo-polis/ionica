// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package publishFirmwareStatusNotificationRequest

import "encoding/json"
import "fmt"
import "reflect"

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId" mapstructure:"vendorId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["vendorId"]; raw != nil && !ok {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if len(plain.VendorId) > 255 {
		return fmt.Errorf("field %s length: must be <= %d", "vendorId", 255)
	}
	*j = CustomDataType(plain)
	return nil
}

type PublishFirmwareStatusEnumType string

const PublishFirmwareStatusEnumTypeChecksumVerified PublishFirmwareStatusEnumType = "ChecksumVerified"
const PublishFirmwareStatusEnumTypeDownloadFailed PublishFirmwareStatusEnumType = "DownloadFailed"
const PublishFirmwareStatusEnumTypeDownloadPaused PublishFirmwareStatusEnumType = "DownloadPaused"
const PublishFirmwareStatusEnumTypeDownloadScheduled PublishFirmwareStatusEnumType = "DownloadScheduled"
const PublishFirmwareStatusEnumTypeDownloaded PublishFirmwareStatusEnumType = "Downloaded"
const PublishFirmwareStatusEnumTypeDownloading PublishFirmwareStatusEnumType = "Downloading"
const PublishFirmwareStatusEnumTypeIdle PublishFirmwareStatusEnumType = "Idle"
const PublishFirmwareStatusEnumTypeInvalidChecksum PublishFirmwareStatusEnumType = "InvalidChecksum"
const PublishFirmwareStatusEnumTypePublishFailed PublishFirmwareStatusEnumType = "PublishFailed"
const PublishFirmwareStatusEnumTypePublished PublishFirmwareStatusEnumType = "Published"

var enumValues_PublishFirmwareStatusEnumType = []interface{}{
	"Idle",
	"DownloadScheduled",
	"Downloading",
	"Downloaded",
	"Published",
	"DownloadFailed",
	"DownloadPaused",
	"InvalidChecksum",
	"ChecksumVerified",
	"PublishFailed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PublishFirmwareStatusEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_PublishFirmwareStatusEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_PublishFirmwareStatusEnumType, v)
	}
	*j = PublishFirmwareStatusEnumType(v)
	return nil
}

type PublishFirmwareStatusNotificationRequestJson struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty" mapstructure:"customData,omitempty"`

	// Required if status is Published. Can be multiple URIâ€™s, if the Local Controller
	// supports e.g. HTTP, HTTPS, and FTP.
	//
	Location []string `json:"location,omitempty" yaml:"location,omitempty" mapstructure:"location,omitempty"`

	// The request id that was
	// provided in the
	// PublishFirmwareRequest which
	// triggered this action.
	//
	RequestId *int `json:"requestId,omitempty" yaml:"requestId,omitempty" mapstructure:"requestId,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status PublishFirmwareStatusEnumType `json:"status" yaml:"status" mapstructure:"status"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *PublishFirmwareStatusNotificationRequestJson) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["status"]; raw != nil && !ok {
		return fmt.Errorf("field status in PublishFirmwareStatusNotificationRequestJson: required")
	}
	type Plain PublishFirmwareStatusNotificationRequestJson
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if plain.Location != nil && len(plain.Location) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "location", 1)
	}
	*j = PublishFirmwareStatusNotificationRequestJson(plain)
	return nil
}
