// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package firmwareStatusNotificationRequest

import "encoding/json"
import "fmt"
import "reflect"

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId" mapstructure:"vendorId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["vendorId"]; raw != nil && !ok {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if len(plain.VendorId) > 255 {
		return fmt.Errorf("field %s length: must be <= %d", "vendorId", 255)
	}
	*j = CustomDataType(plain)
	return nil
}

type FirmwareStatusEnumType string

const FirmwareStatusEnumTypeDownloadFailed FirmwareStatusEnumType = "DownloadFailed"
const FirmwareStatusEnumTypeDownloadPaused FirmwareStatusEnumType = "DownloadPaused"
const FirmwareStatusEnumTypeDownloadScheduled FirmwareStatusEnumType = "DownloadScheduled"
const FirmwareStatusEnumTypeDownloaded FirmwareStatusEnumType = "Downloaded"
const FirmwareStatusEnumTypeDownloading FirmwareStatusEnumType = "Downloading"
const FirmwareStatusEnumTypeIdle FirmwareStatusEnumType = "Idle"
const FirmwareStatusEnumTypeInstallRebooting FirmwareStatusEnumType = "InstallRebooting"
const FirmwareStatusEnumTypeInstallScheduled FirmwareStatusEnumType = "InstallScheduled"
const FirmwareStatusEnumTypeInstallVerificationFailed FirmwareStatusEnumType = "InstallVerificationFailed"
const FirmwareStatusEnumTypeInstallationFailed FirmwareStatusEnumType = "InstallationFailed"
const FirmwareStatusEnumTypeInstalled FirmwareStatusEnumType = "Installed"
const FirmwareStatusEnumTypeInstalling FirmwareStatusEnumType = "Installing"
const FirmwareStatusEnumTypeInvalidSignature FirmwareStatusEnumType = "InvalidSignature"
const FirmwareStatusEnumTypeSignatureVerified FirmwareStatusEnumType = "SignatureVerified"

var enumValues_FirmwareStatusEnumType = []interface{}{
	"Downloaded",
	"DownloadFailed",
	"Downloading",
	"DownloadScheduled",
	"DownloadPaused",
	"Idle",
	"InstallationFailed",
	"Installing",
	"Installed",
	"InstallRebooting",
	"InstallScheduled",
	"InstallVerificationFailed",
	"InvalidSignature",
	"SignatureVerified",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *FirmwareStatusEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_FirmwareStatusEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_FirmwareStatusEnumType, v)
	}
	*j = FirmwareStatusEnumType(v)
	return nil
}

type FirmwareStatusNotificationRequestJson struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty" mapstructure:"customData,omitempty"`

	// The request id that was provided in the
	// UpdateFirmwareRequest that started this firmware update.
	// This field is mandatory, unless the message was triggered by a
	// TriggerMessageRequest AND there is no firmware update ongoing.
	//
	RequestId *int `json:"requestId,omitempty" yaml:"requestId,omitempty" mapstructure:"requestId,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status FirmwareStatusEnumType `json:"status" yaml:"status" mapstructure:"status"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *FirmwareStatusNotificationRequestJson) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["status"]; raw != nil && !ok {
		return fmt.Errorf("field status in FirmwareStatusNotificationRequestJson: required")
	}
	type Plain FirmwareStatusNotificationRequestJson
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = FirmwareStatusNotificationRequestJson(plain)
	return nil
}
