// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package reserveNowRequest

import "encoding/json"
import "fmt"
import "reflect"
import "time"

// Contains a case insensitive identifier to use for the authorization and the type
// of authorization to support multiple forms of identifiers.
type AdditionalInfoType struct {
	// This field specifies the additional IdToken.
	//
	AdditionalIdToken string `json:"additionalIdToken" yaml:"additionalIdToken" mapstructure:"additionalIdToken"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty" mapstructure:"customData,omitempty"`

	// This defines the type of the additionalIdToken. This is a custom type, so the
	// implementation needs to be agreed upon by all involved parties.
	//
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *AdditionalInfoType) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["additionalIdToken"]; raw != nil && !ok {
		return fmt.Errorf("field additionalIdToken in AdditionalInfoType: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in AdditionalInfoType: required")
	}
	type Plain AdditionalInfoType
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if len(plain.AdditionalIdToken) > 36 {
		return fmt.Errorf("field %s length: must be <= %d", "additionalIdToken", 36)
	}
	if len(plain.Type) > 50 {
		return fmt.Errorf("field %s length: must be <= %d", "type", 50)
	}
	*j = AdditionalInfoType(plain)
	return nil
}

type ConnectorEnumType string

const ConnectorEnumTypeCCCS1 ConnectorEnumType = "cCCS1"
const ConnectorEnumTypeCCCS2 ConnectorEnumType = "cCCS2"
const ConnectorEnumTypeCG105 ConnectorEnumType = "cG105"
const ConnectorEnumTypeCTesla ConnectorEnumType = "cTesla"
const ConnectorEnumTypeCType1 ConnectorEnumType = "cType1"
const ConnectorEnumTypeCType2 ConnectorEnumType = "cType2"
const ConnectorEnumTypeOther1PhMax16A ConnectorEnumType = "Other1PhMax16A"
const ConnectorEnumTypeOther1PhOver16A ConnectorEnumType = "Other1PhOver16A"
const ConnectorEnumTypeOther3Ph ConnectorEnumType = "Other3Ph"
const ConnectorEnumTypePan ConnectorEnumType = "Pan"
const ConnectorEnumTypeS3091P16A ConnectorEnumType = "s309-1P-16A"
const ConnectorEnumTypeS3091P32A ConnectorEnumType = "s309-1P-32A"
const ConnectorEnumTypeS3093P16A ConnectorEnumType = "s309-3P-16A"
const ConnectorEnumTypeS3093P32A ConnectorEnumType = "s309-3P-32A"
const ConnectorEnumTypeSBS1361 ConnectorEnumType = "sBS1361"
const ConnectorEnumTypeSCEE77 ConnectorEnumType = "sCEE-7-7"
const ConnectorEnumTypeSType2 ConnectorEnumType = "sType2"
const ConnectorEnumTypeSType3 ConnectorEnumType = "sType3"
const ConnectorEnumTypeUndetermined ConnectorEnumType = "Undetermined"
const ConnectorEnumTypeUnknown ConnectorEnumType = "Unknown"
const ConnectorEnumTypeWInductive ConnectorEnumType = "wInductive"
const ConnectorEnumTypeWResonant ConnectorEnumType = "wResonant"

var enumValues_ConnectorEnumType = []interface{}{
	"cCCS1",
	"cCCS2",
	"cG105",
	"cTesla",
	"cType1",
	"cType2",
	"s309-1P-16A",
	"s309-1P-32A",
	"s309-3P-16A",
	"s309-3P-32A",
	"sBS1361",
	"sCEE-7-7",
	"sType2",
	"sType3",
	"Other1PhMax16A",
	"Other1PhOver16A",
	"Other3Ph",
	"Pan",
	"wInductive",
	"wResonant",
	"Undetermined",
	"Unknown",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectorEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ConnectorEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ConnectorEnumType, v)
	}
	*j = ConnectorEnumType(v)
	return nil
}

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId" mapstructure:"vendorId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["vendorId"]; raw != nil && !ok {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if len(plain.VendorId) > 255 {
		return fmt.Errorf("field %s length: must be <= %d", "vendorId", 255)
	}
	*j = CustomDataType(plain)
	return nil
}

type IdTokenEnumType string

const IdTokenEnumTypeCentral IdTokenEnumType = "Central"
const IdTokenEnumTypeEMAID IdTokenEnumType = "eMAID"
const IdTokenEnumTypeISO14443 IdTokenEnumType = "ISO14443"
const IdTokenEnumTypeISO15693 IdTokenEnumType = "ISO15693"
const IdTokenEnumTypeKeyCode IdTokenEnumType = "KeyCode"
const IdTokenEnumTypeLocal IdTokenEnumType = "Local"
const IdTokenEnumTypeMacAddress IdTokenEnumType = "MacAddress"
const IdTokenEnumTypeNoAuthorization IdTokenEnumType = "NoAuthorization"

var enumValues_IdTokenEnumType = []interface{}{
	"Central",
	"eMAID",
	"ISO14443",
	"ISO15693",
	"KeyCode",
	"Local",
	"MacAddress",
	"NoAuthorization",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *IdTokenEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_IdTokenEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_IdTokenEnumType, v)
	}
	*j = IdTokenEnumType(v)
	return nil
}

// Contains a case insensitive identifier to use for the authorization and the type
// of authorization to support multiple forms of identifiers.
type IdTokenType struct {
	// AdditionalInfo corresponds to the JSON schema field "additionalInfo".
	AdditionalInfo []AdditionalInfoType `json:"additionalInfo,omitempty" yaml:"additionalInfo,omitempty" mapstructure:"additionalInfo,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty" mapstructure:"customData,omitempty"`

	// IdToken is case insensitive. Might hold the hidden id of an RFID tag, but can
	// for example also contain a UUID.
	//
	IdToken string `json:"idToken" yaml:"idToken" mapstructure:"idToken"`

	// Type corresponds to the JSON schema field "type".
	Type IdTokenEnumType `json:"type" yaml:"type" mapstructure:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *IdTokenType) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["idToken"]; raw != nil && !ok {
		return fmt.Errorf("field idToken in IdTokenType: required")
	}
	if _, ok := raw["type"]; raw != nil && !ok {
		return fmt.Errorf("field type in IdTokenType: required")
	}
	type Plain IdTokenType
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if plain.AdditionalInfo != nil && len(plain.AdditionalInfo) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "additionalInfo", 1)
	}
	if len(plain.IdToken) > 36 {
		return fmt.Errorf("field %s length: must be <= %d", "idToken", 36)
	}
	*j = IdTokenType(plain)
	return nil
}

type ReserveNowRequestJson struct {
	// ConnectorType corresponds to the JSON schema field "connectorType".
	ConnectorType *ConnectorEnumType `json:"connectorType,omitempty" yaml:"connectorType,omitempty" mapstructure:"connectorType,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty" mapstructure:"customData,omitempty"`

	// This contains ID of the evse to be reserved.
	//
	EvseId *int `json:"evseId,omitempty" yaml:"evseId,omitempty" mapstructure:"evseId,omitempty"`

	// Date and time at which the reservation expires.
	//
	ExpiryDateTime time.Time `json:"expiryDateTime" yaml:"expiryDateTime" mapstructure:"expiryDateTime"`

	// GroupIdToken corresponds to the JSON schema field "groupIdToken".
	GroupIdToken *IdTokenType `json:"groupIdToken,omitempty" yaml:"groupIdToken,omitempty" mapstructure:"groupIdToken,omitempty"`

	// Id of reservation.
	//
	Id int `json:"id" yaml:"id" mapstructure:"id"`

	// IdToken corresponds to the JSON schema field "idToken".
	IdToken IdTokenType `json:"idToken" yaml:"idToken" mapstructure:"idToken"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ReserveNowRequestJson) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["expiryDateTime"]; raw != nil && !ok {
		return fmt.Errorf("field expiryDateTime in ReserveNowRequestJson: required")
	}
	if _, ok := raw["id"]; raw != nil && !ok {
		return fmt.Errorf("field id in ReserveNowRequestJson: required")
	}
	if _, ok := raw["idToken"]; raw != nil && !ok {
		return fmt.Errorf("field idToken in ReserveNowRequestJson: required")
	}
	type Plain ReserveNowRequestJson
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = ReserveNowRequestJson(plain)
	return nil
}
