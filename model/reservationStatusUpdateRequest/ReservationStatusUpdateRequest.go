// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package reservationStatusUpdateRequest

import "encoding/json"
import "fmt"
import "reflect"

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId" mapstructure:"vendorId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["vendorId"]; raw != nil && !ok {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if len(plain.VendorId) > 255 {
		return fmt.Errorf("field %s length: must be <= %d", "vendorId", 255)
	}
	*j = CustomDataType(plain)
	return nil
}

type ReservationStatusUpdateRequestJson struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty" mapstructure:"customData,omitempty"`

	// The ID of the reservation.
	//
	ReservationId int `json:"reservationId" yaml:"reservationId" mapstructure:"reservationId"`

	// ReservationUpdateStatus corresponds to the JSON schema field
	// "reservationUpdateStatus".
	ReservationUpdateStatus ReservationUpdateStatusEnumType `json:"reservationUpdateStatus" yaml:"reservationUpdateStatus" mapstructure:"reservationUpdateStatus"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ReservationStatusUpdateRequestJson) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["reservationId"]; raw != nil && !ok {
		return fmt.Errorf("field reservationId in ReservationStatusUpdateRequestJson: required")
	}
	if _, ok := raw["reservationUpdateStatus"]; raw != nil && !ok {
		return fmt.Errorf("field reservationUpdateStatus in ReservationStatusUpdateRequestJson: required")
	}
	type Plain ReservationStatusUpdateRequestJson
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = ReservationStatusUpdateRequestJson(plain)
	return nil
}

type ReservationUpdateStatusEnumType string

const ReservationUpdateStatusEnumTypeExpired ReservationUpdateStatusEnumType = "Expired"
const ReservationUpdateStatusEnumTypeRemoved ReservationUpdateStatusEnumType = "Removed"

var enumValues_ReservationUpdateStatusEnumType = []interface{}{
	"Expired",
	"Removed",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ReservationUpdateStatusEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ReservationUpdateStatusEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ReservationUpdateStatusEnumType, v)
	}
	*j = ReservationUpdateStatusEnumType(v)
	return nil
}
