// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package certificateSignedRequest

import "encoding/json"
import "fmt"
import "reflect"

type CertificateSignedRequestJson struct {
	// The signed PEM encoded X.509 certificate. This can also contain the necessary
	// sub CA certificates. In that case, the order of the bundle should follow the
	// certificate chain, starting from the leaf certificate.
	//
	// The Configuration Variable
	// &lt;&lt;configkey-max-certificate-chain-size,MaxCertificateChainSize&gt;&gt;
	// can be used to limit the maximum size of this field.
	//
	CertificateChain string `json:"certificateChain" yaml:"certificateChain" mapstructure:"certificateChain"`

	// CertificateType corresponds to the JSON schema field "certificateType".
	CertificateType *CertificateSigningUseEnumType `json:"certificateType,omitempty" yaml:"certificateType,omitempty" mapstructure:"certificateType,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty" mapstructure:"customData,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CertificateSignedRequestJson) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["certificateChain"]; raw != nil && !ok {
		return fmt.Errorf("field certificateChain in CertificateSignedRequestJson: required")
	}
	type Plain CertificateSignedRequestJson
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if len(plain.CertificateChain) > 10000 {
		return fmt.Errorf("field %s length: must be <= %d", "certificateChain", 10000)
	}
	*j = CertificateSignedRequestJson(plain)
	return nil
}

type CertificateSigningUseEnumType string

const CertificateSigningUseEnumTypeChargingStationCertificate CertificateSigningUseEnumType = "ChargingStationCertificate"
const CertificateSigningUseEnumTypeV2GCertificate CertificateSigningUseEnumType = "V2GCertificate"

var enumValues_CertificateSigningUseEnumType = []interface{}{
	"ChargingStationCertificate",
	"V2GCertificate",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CertificateSigningUseEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_CertificateSigningUseEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_CertificateSigningUseEnumType, v)
	}
	*j = CertificateSigningUseEnumType(v)
	return nil
}

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId" mapstructure:"vendorId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["vendorId"]; raw != nil && !ok {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if len(plain.VendorId) > 255 {
		return fmt.Errorf("field %s length: must be <= %d", "vendorId", 255)
	}
	*j = CustomDataType(plain)
	return nil
}
