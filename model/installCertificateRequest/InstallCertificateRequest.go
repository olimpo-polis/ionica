// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package installCertificateRequest

import "encoding/json"
import "fmt"
import "reflect"

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId" mapstructure:"vendorId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["vendorId"]; raw != nil && !ok {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if len(plain.VendorId) > 255 {
		return fmt.Errorf("field %s length: must be <= %d", "vendorId", 255)
	}
	*j = CustomDataType(plain)
	return nil
}

type InstallCertificateRequestJson struct {
	// A PEM encoded X.509 certificate.
	//
	Certificate string `json:"certificate" yaml:"certificate" mapstructure:"certificate"`

	// CertificateType corresponds to the JSON schema field "certificateType".
	CertificateType InstallCertificateUseEnumType `json:"certificateType" yaml:"certificateType" mapstructure:"certificateType"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty" mapstructure:"customData,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *InstallCertificateRequestJson) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["certificate"]; raw != nil && !ok {
		return fmt.Errorf("field certificate in InstallCertificateRequestJson: required")
	}
	if _, ok := raw["certificateType"]; raw != nil && !ok {
		return fmt.Errorf("field certificateType in InstallCertificateRequestJson: required")
	}
	type Plain InstallCertificateRequestJson
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if len(plain.Certificate) > 5500 {
		return fmt.Errorf("field %s length: must be <= %d", "certificate", 5500)
	}
	*j = InstallCertificateRequestJson(plain)
	return nil
}

type InstallCertificateUseEnumType string

const InstallCertificateUseEnumTypeCSMSRootCertificate InstallCertificateUseEnumType = "CSMSRootCertificate"
const InstallCertificateUseEnumTypeMORootCertificate InstallCertificateUseEnumType = "MORootCertificate"
const InstallCertificateUseEnumTypeManufacturerRootCertificate InstallCertificateUseEnumType = "ManufacturerRootCertificate"
const InstallCertificateUseEnumTypeV2GRootCertificate InstallCertificateUseEnumType = "V2GRootCertificate"

var enumValues_InstallCertificateUseEnumType = []interface{}{
	"V2GRootCertificate",
	"MORootCertificate",
	"CSMSRootCertificate",
	"ManufacturerRootCertificate",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *InstallCertificateUseEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_InstallCertificateUseEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_InstallCertificateUseEnumType, v)
	}
	*j = InstallCertificateUseEnumType(v)
	return nil
}
