// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package getInstalledCertificateIdsResponse

import "encoding/json"
import "fmt"
import "reflect"

type CertificateHashDataChainType struct {
	// CertificateHashData corresponds to the JSON schema field "certificateHashData".
	CertificateHashData CertificateHashDataType `json:"certificateHashData" yaml:"certificateHashData" mapstructure:"certificateHashData"`

	// CertificateType corresponds to the JSON schema field "certificateType".
	CertificateType GetCertificateIdUseEnumType `json:"certificateType" yaml:"certificateType" mapstructure:"certificateType"`

	// ChildCertificateHashData corresponds to the JSON schema field
	// "childCertificateHashData".
	ChildCertificateHashData []CertificateHashDataType `json:"childCertificateHashData,omitempty" yaml:"childCertificateHashData,omitempty" mapstructure:"childCertificateHashData,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty" mapstructure:"customData,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CertificateHashDataChainType) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["certificateHashData"]; raw != nil && !ok {
		return fmt.Errorf("field certificateHashData in CertificateHashDataChainType: required")
	}
	if _, ok := raw["certificateType"]; raw != nil && !ok {
		return fmt.Errorf("field certificateType in CertificateHashDataChainType: required")
	}
	type Plain CertificateHashDataChainType
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if plain.ChildCertificateHashData != nil && len(plain.ChildCertificateHashData) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "childCertificateHashData", 1)
	}
	if len(plain.ChildCertificateHashData) > 4 {
		return fmt.Errorf("field %s length: must be <= %d", "childCertificateHashData", 4)
	}
	*j = CertificateHashDataChainType(plain)
	return nil
}

type CertificateHashDataType struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty" mapstructure:"customData,omitempty"`

	// HashAlgorithm corresponds to the JSON schema field "hashAlgorithm".
	HashAlgorithm HashAlgorithmEnumType `json:"hashAlgorithm" yaml:"hashAlgorithm" mapstructure:"hashAlgorithm"`

	// Hashed value of the issuers public key
	//
	IssuerKeyHash string `json:"issuerKeyHash" yaml:"issuerKeyHash" mapstructure:"issuerKeyHash"`

	// Hashed value of the Issuer DN (Distinguished Name).
	//
	//
	IssuerNameHash string `json:"issuerNameHash" yaml:"issuerNameHash" mapstructure:"issuerNameHash"`

	// The serial number of the certificate.
	//
	SerialNumber string `json:"serialNumber" yaml:"serialNumber" mapstructure:"serialNumber"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CertificateHashDataType) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["hashAlgorithm"]; raw != nil && !ok {
		return fmt.Errorf("field hashAlgorithm in CertificateHashDataType: required")
	}
	if _, ok := raw["issuerKeyHash"]; raw != nil && !ok {
		return fmt.Errorf("field issuerKeyHash in CertificateHashDataType: required")
	}
	if _, ok := raw["issuerNameHash"]; raw != nil && !ok {
		return fmt.Errorf("field issuerNameHash in CertificateHashDataType: required")
	}
	if _, ok := raw["serialNumber"]; raw != nil && !ok {
		return fmt.Errorf("field serialNumber in CertificateHashDataType: required")
	}
	type Plain CertificateHashDataType
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if len(plain.IssuerKeyHash) > 128 {
		return fmt.Errorf("field %s length: must be <= %d", "issuerKeyHash", 128)
	}
	if len(plain.IssuerNameHash) > 128 {
		return fmt.Errorf("field %s length: must be <= %d", "issuerNameHash", 128)
	}
	if len(plain.SerialNumber) > 40 {
		return fmt.Errorf("field %s length: must be <= %d", "serialNumber", 40)
	}
	*j = CertificateHashDataType(plain)
	return nil
}

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId" mapstructure:"vendorId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["vendorId"]; raw != nil && !ok {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if len(plain.VendorId) > 255 {
		return fmt.Errorf("field %s length: must be <= %d", "vendorId", 255)
	}
	*j = CustomDataType(plain)
	return nil
}

type GetCertificateIdUseEnumType string

const GetCertificateIdUseEnumTypeCSMSRootCertificate GetCertificateIdUseEnumType = "CSMSRootCertificate"
const GetCertificateIdUseEnumTypeMORootCertificate GetCertificateIdUseEnumType = "MORootCertificate"
const GetCertificateIdUseEnumTypeManufacturerRootCertificate GetCertificateIdUseEnumType = "ManufacturerRootCertificate"
const GetCertificateIdUseEnumTypeV2GCertificateChain GetCertificateIdUseEnumType = "V2GCertificateChain"
const GetCertificateIdUseEnumTypeV2GRootCertificate GetCertificateIdUseEnumType = "V2GRootCertificate"

var enumValues_GetCertificateIdUseEnumType = []interface{}{
	"V2GRootCertificate",
	"MORootCertificate",
	"CSMSRootCertificate",
	"V2GCertificateChain",
	"ManufacturerRootCertificate",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetCertificateIdUseEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetCertificateIdUseEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetCertificateIdUseEnumType, v)
	}
	*j = GetCertificateIdUseEnumType(v)
	return nil
}

type GetInstalledCertificateIdsResponseJson struct {
	// CertificateHashDataChain corresponds to the JSON schema field
	// "certificateHashDataChain".
	CertificateHashDataChain []CertificateHashDataChainType `json:"certificateHashDataChain,omitempty" yaml:"certificateHashDataChain,omitempty" mapstructure:"certificateHashDataChain,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty" mapstructure:"customData,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status GetInstalledCertificateStatusEnumType `json:"status" yaml:"status" mapstructure:"status"`

	// StatusInfo corresponds to the JSON schema field "statusInfo".
	StatusInfo *StatusInfoType `json:"statusInfo,omitempty" yaml:"statusInfo,omitempty" mapstructure:"statusInfo,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetInstalledCertificateIdsResponseJson) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["status"]; raw != nil && !ok {
		return fmt.Errorf("field status in GetInstalledCertificateIdsResponseJson: required")
	}
	type Plain GetInstalledCertificateIdsResponseJson
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if plain.CertificateHashDataChain != nil && len(plain.CertificateHashDataChain) < 1 {
		return fmt.Errorf("field %s length: must be >= %d", "certificateHashDataChain", 1)
	}
	*j = GetInstalledCertificateIdsResponseJson(plain)
	return nil
}

type GetInstalledCertificateStatusEnumType string

const GetInstalledCertificateStatusEnumTypeAccepted GetInstalledCertificateStatusEnumType = "Accepted"
const GetInstalledCertificateStatusEnumTypeNotFound GetInstalledCertificateStatusEnumType = "NotFound"

var enumValues_GetInstalledCertificateStatusEnumType = []interface{}{
	"Accepted",
	"NotFound",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *GetInstalledCertificateStatusEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_GetInstalledCertificateStatusEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_GetInstalledCertificateStatusEnumType, v)
	}
	*j = GetInstalledCertificateStatusEnumType(v)
	return nil
}

type HashAlgorithmEnumType string

const HashAlgorithmEnumTypeSHA256 HashAlgorithmEnumType = "SHA256"
const HashAlgorithmEnumTypeSHA384 HashAlgorithmEnumType = "SHA384"
const HashAlgorithmEnumTypeSHA512 HashAlgorithmEnumType = "SHA512"

var enumValues_HashAlgorithmEnumType = []interface{}{
	"SHA256",
	"SHA384",
	"SHA512",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *HashAlgorithmEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_HashAlgorithmEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_HashAlgorithmEnumType, v)
	}
	*j = HashAlgorithmEnumType(v)
	return nil
}

// Element providing more information about the status.
type StatusInfoType struct {
	// Additional text to provide detailed information.
	//
	AdditionalInfo *string `json:"additionalInfo,omitempty" yaml:"additionalInfo,omitempty" mapstructure:"additionalInfo,omitempty"`

	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty" mapstructure:"customData,omitempty"`

	// A predefined code for the reason why the status is returned in this response.
	// The string is case-insensitive.
	//
	ReasonCode string `json:"reasonCode" yaml:"reasonCode" mapstructure:"reasonCode"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StatusInfoType) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["reasonCode"]; raw != nil && !ok {
		return fmt.Errorf("field reasonCode in StatusInfoType: required")
	}
	type Plain StatusInfoType
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if plain.AdditionalInfo != nil && len(*plain.AdditionalInfo) > 512 {
		return fmt.Errorf("field %s length: must be <= %d", "additionalInfo", 512)
	}
	if len(plain.ReasonCode) > 20 {
		return fmt.Errorf("field %s length: must be <= %d", "reasonCode", 20)
	}
	*j = StatusInfoType(plain)
	return nil
}
