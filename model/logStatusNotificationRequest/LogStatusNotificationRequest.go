// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package logStatusNotificationRequest

import "encoding/json"
import "fmt"
import "reflect"

// This class does not get 'AdditionalProperties = false' in the schema generation,
// so it can be extended with arbitrary JSON properties to allow adding custom
// data.
type CustomDataType struct {
	// VendorId corresponds to the JSON schema field "vendorId".
	VendorId string `json:"vendorId" yaml:"vendorId" mapstructure:"vendorId"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *CustomDataType) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["vendorId"]; raw != nil && !ok {
		return fmt.Errorf("field vendorId in CustomDataType: required")
	}
	type Plain CustomDataType
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	if len(plain.VendorId) > 255 {
		return fmt.Errorf("field %s length: must be <= %d", "vendorId", 255)
	}
	*j = CustomDataType(plain)
	return nil
}

type LogStatusNotificationRequestJson struct {
	// CustomData corresponds to the JSON schema field "customData".
	CustomData *CustomDataType `json:"customData,omitempty" yaml:"customData,omitempty" mapstructure:"customData,omitempty"`

	// The request id that was provided in GetLogRequest that started this log upload.
	// This field is mandatory,
	// unless the message was triggered by a TriggerMessageRequest AND there is no log
	// upload ongoing.
	//
	RequestId *int `json:"requestId,omitempty" yaml:"requestId,omitempty" mapstructure:"requestId,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status UploadLogStatusEnumType `json:"status" yaml:"status" mapstructure:"status"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *LogStatusNotificationRequestJson) UnmarshalJSON(value []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(value, &raw); err != nil {
		return err
	}
	if _, ok := raw["status"]; raw != nil && !ok {
		return fmt.Errorf("field status in LogStatusNotificationRequestJson: required")
	}
	type Plain LogStatusNotificationRequestJson
	var plain Plain
	if err := json.Unmarshal(value, &plain); err != nil {
		return err
	}
	*j = LogStatusNotificationRequestJson(plain)
	return nil
}

type UploadLogStatusEnumType string

const UploadLogStatusEnumTypeAcceptedCanceled UploadLogStatusEnumType = "AcceptedCanceled"
const UploadLogStatusEnumTypeBadMessage UploadLogStatusEnumType = "BadMessage"
const UploadLogStatusEnumTypeIdle UploadLogStatusEnumType = "Idle"
const UploadLogStatusEnumTypeNotSupportedOperation UploadLogStatusEnumType = "NotSupportedOperation"
const UploadLogStatusEnumTypePermissionDenied UploadLogStatusEnumType = "PermissionDenied"
const UploadLogStatusEnumTypeUploadFailure UploadLogStatusEnumType = "UploadFailure"
const UploadLogStatusEnumTypeUploaded UploadLogStatusEnumType = "Uploaded"
const UploadLogStatusEnumTypeUploading UploadLogStatusEnumType = "Uploading"

var enumValues_UploadLogStatusEnumType = []interface{}{
	"BadMessage",
	"Idle",
	"NotSupportedOperation",
	"PermissionDenied",
	"Uploaded",
	"UploadFailure",
	"Uploading",
	"AcceptedCanceled",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *UploadLogStatusEnumType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_UploadLogStatusEnumType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_UploadLogStatusEnumType, v)
	}
	*j = UploadLogStatusEnumType(v)
	return nil
}
